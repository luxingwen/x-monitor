#!/usr/bin/env stap

global agbp_map
global agbpp_map
global tran_agbp_map // xfs_trans ---> xfs_buf ---> agf
global lip_agbp_map // xfs_log_item ---> xfs_buf ---> agf
global bip_agbp_map // xfs_buf_log_item ---> xfs_buf ---> agf
global lv_agbp_map // xfs_log_vec ---> xfs_buf ---> agf

probe begin {
	printf("start tap to xfs.agf...\n")
}

probe end {
    delete agbp_map
    delete agbpp_map
    delete tran_agbp_map
    delete lip_agbp_map
    delete bip_agbp_map
    delete lv_agbp_map
    printf("exit tap to xfs.agf\n")
}

function build_agf_info_string:string(dev_maj, dev_min, agno)
{
    str = sprintf("dev:[%d:%d], agno:%d", dev_maj, dev_min, agno)
    return str
}

function format_lsn:string(lsn)
{
    lsn_blkno = lsn & 0xffffffff
    lsn_cycle = lsn >> 32
    str = sprintf("(%d,%d)", lsn_cycle, lsn_blkno)
    return str
}

// 读取agf的元数据返回
probe module("xfs").function("xfs_read_agf") {
    s_dev = $mp->m_super->s_dev
    dev_maj = MAJOR(s_dev)
    dev_min = MINOR(s_dev)

    if(dev_maj == 7 && dev_min == 0) {
        agbpp_map[tid()] = $bpp
    //printf("----------start----------\n")
        printf("%s, tid:%d, --->xfs_read_agf device:[%d:%d], agno:%d\n", ctime(), tid(), dev_maj, dev_min, $agno)
    }
}

probe module("xfs").function("xfs_buf_read_map") {
    tid = tid()
    if(tid in agbpp_map) {
        printf("%s, tid:%d, xfs_read_agf--->xfs_buf_read_map(flags:0x%x)\n", ctime(), tid, $flags)
    }
}

probe module("xfs").function("_xfs_buf_read").return {
    tid = tid()
    if(tid in agbpp_map) {
        //xfs_buf_get_map中读取的agf对应的xfs_buf没有XBF_DONE标志，因此从磁盘读取
        printf("%s, tid:%d, xfs_read_agf--->xfs_buf_read_map<---_xfs_buf_read, ret:%d\n", ctime(), tid, $return)
    }
}

probe module("xfs").function("xfs_read_agf").return {
    ret = $return
    tid = tid()
    if(tid in agbpp_map) {
        agbpp = agbpp_map[tid]
        // 读取指针地址的内容，解引用，通过这种方式可以获取函数的返回参数值, 其实就是agf的xfs_buf的地址了
        agbp_void = kernel_pointer(agbpp)
        // 将agf对应的xfs_buf加入到map中，agno作为value
        agno = @entry($agno)
        s_dev = @cast(@entry($mp), "struct xfs_mount", "xfs")->m_super->s_dev
        dev_maj = MAJOR(s_dev)
        dev_min = MINOR(s_dev)
        agf_info = build_agf_info_string(dev_maj, dev_min, agno)
        agbp_map[agbp_void] = agf_info

        agbp_error = @cast(agbp_void, "struct xfs_buf", "xfs")->b_error
        //printf("xfs_read_agf.exit tid:%d, ret:%d, agbp_error:%d\n", tid(), ret, agbp_error)
        s_dev = @cast(agbp_void, "struct xfs_buf", "xfs")->b_mount->m_super->s_dev
        agbp_buf_addr = @cast(agbp_void, "struct xfs_buf", "xfs")->b_addr
        agf_magic = @cast(agbp_buf_addr, "struct xfs_agf", "xfs")->agf_magicnum
        agf_freeblks = @cast(agbp_buf_addr, "struct xfs_agf", "xfs")->agf_freeblks
        printf("%s, tid:%d, agf:{%s}, xfs_read_agf.exit<--- ret:%d, agbp_error:%d, agf_magic:0x%x, agf_freeblks:%d\n", ctime(), tid, agf_info, ret, agbp_error, ntohl(agf_magic), ntohl(agf_freeblks))
        delete agbpp_map[tid]
    }
}

// 将agf的xfs_buf对应的xfs_log_item加入到tran中
probe module("xfs").function("_xfs_trans_bjoin") {
    if($bp in agbp_map) {
        agf_info = agbp_map[$bp]
        // struct xfs_buf_log_item	*b_log_item;
        // struct xfs_log_item	bli_item;
        agbp_bip = @cast($bp, "struct xfs_buf", "xfs")->b_log_item
        agbp_lip = &@cast($bp, "struct xfs_buf", "xfs")->b_log_item->bli_item
        // 如果是agf的xfs_buf
        printf("%s, tid:%d, agf:{%s}, _xfs_trans_bjoin xfs_log_item:%s into xfs_tran:%s\n", ctime(), tid(), agf_info, @cast($bp, "struct xfs_buf", "xfs")->b_log_item->bli_item$, $tp$)
        printf("%s, tid:%d, agf:{%s}, agbp_bip:%p, agbp_lip:%p\n", ctime(), tid(), agf_info, agbp_bip, agbp_lip)
        // 将agf的xfs_buf对应的xfs_tran加入到map中
        tran_agbp_map[$tp] = $bp
        lip_agbp_map[agbp_lip] = $bp
        bip_agbp_map[agbp_bip] = $bp
    }
}

// 分配ag的空闲空间
probe module("xfs").function("xfs_alloc_ag_vextent") {
    //s_dev = $args->mp->m_super->s_dev
    agbp = $args->agbp

    if(agbp in agbp_map) {
        agf_info = agbp_map[agbp]
        // xfs_perag
        agf_magic = @cast(agbp->b_addr, "struct xfs_agf", "xfs")->agf_magicnum
        agf_freeblks = @cast(agbp->b_addr, "struct xfs_agf", "xfs")->agf_freeblks
        printf("%s, tid:%d, agf:{%s}, xfs_alloc_ag_vextent agf_magic:0x%x, agf_freeblks:%d\n", ctime(), tid(), agf_info, ntohl(agf_magic), ntohl(agf_freeblks))
    }
}

// 分配ag的空闲空间完成，修改ag的元数据
probe module("xfs").function("xfs_alloc_update_counters") {
    if($agbp in agbp_map) {
        agf_info = agbp_map[$agbp]
        //pagf_freeblks = @cast($agbp->b_addr, "struct xfs_agf", "xfs")->agf_freeblks
        pagf_freeblks = $agbp->b_pag->pagf_freeblks
        printf("%s, tid:%d, agf:{%s}, xfs_alloc_update_counters  pagf_freeblks:%d + len:%d\n", ctime(), tid(), agf_info, pagf_freeblks, $len)
    }
}

// 负责将缓冲区 xfs_buf 的更改记录到日志中
// probe module("xfs").function("xfs_buf_item_log") {
//     agbp = $bip->bli_buf
//     if(agbp in agbp_map) {
//         agf_info = agbp_map[agbp]
//         printf("%s, tid:%d, agf:{%s}, xfs_buf_item_log first:%d, last:%d, bi_format_count:%d, refcount:%d\n", ctime(), tid(), agf_info, $first, $last, $bip->bli_format_count, $bip->bli_refcount->counter)
//     }
// }

// 判断xfs_bmapi_write的返回值
probe module("xfs").function("xfs_bmapi_write").return {
    // 获得入参数xfs_tran*
    tran = @entry($tp)
    error = $return
    if(tran in tran_agbp_map) {
        agbp = tran_agbp_map[tran]
        agf_info = agbp_map[agbp]
        printf("%s, tid:%d, agf:{%s}, xfs_bmapi_write ret:%d\n", ctime(), tid(), agf_info, error)
    }
}

// 提交事务后释放事务
probe module("xfs").function("xfs_trans_free") {
    tran = $tp
    if(tran in tran_agbp_map) {
        //agbp = tran_agbp_map[tran]
        //agf_info = agbp_map[agbp]
        //printf("%s, tid:%d, agf:{%s}, xfs_trans_free tran:%p\n", ctime(), tid(), agf_info, $tp)
        delete tran_agbp_map[tran]
    }
}

// 提交事务
probe module("xfs").function("xfs_log_commit_cil") {
    if($tp in tran_agbp_map) {
        agbp = tran_agbp_map[$tp]
        agf_info = agbp_map[agbp]
        mp_log = $mp->m_log
        // 读取地址的内容，入参
        commit_lsn = kernel_long($commit_lsn) // should be equal -1
        printf("%s, tid:%d, agf:{%s}, xfs_log_commit_cil commit_lsn:%d, xc_commit_lsn:%d, regrant:%d, xfs_tran:%s, ticket:%s\n", ctime(), tid(), agf_info, commit_lsn, mp_log->l_cilp->xc_ctx->sequence, $regrant, $tp$, $tp->t_ticket$)
    }
}

// 固定日志缓冲区
probe module("xfs").function("xfs_buf_item_pin").return {
    lip = @entry($lip)
    if(lip in lip_agbp_map) {
        bip_refcount = @cast(lip, "struct xfs_buf_log_item", "xfs")->bli_refcount->counter
        bip_pincount = @cast(lip, "struct xfs_buf_log_item", "xfs")->bli_buf->b_pin_count->counter
        agbp = lip_agbp_map[lip]
        printf("%s, tid:%d, agf:{%s}, xfs_buf_item_pin.return bip_refcount:%d, bip_pincount:%d\n", ctime(), tid(), agbp_map[agbp], bip_refcount, bip_pincount)
    }
}

probe module("xfs").function("xfs_perag_put") {
    s_dev = $pag->pag_mount->m_super->s_dev
    pag_ref = $pag->pag_ref->counter
    pag_ref--
    if(pag_ref == 0) {
        dev_maj = MAJOR(s_dev)
        dev_min = MINOR(s_dev)
        printf("%s, tid:%d, xfs_perag_put device:[%d:%d], agno:%d, pag_ref:%d\n", ctime(), tid(), dev_maj, dev_min, $pag->pag_agno, pag_ref)
    }
}

probe module("xfs").function("xfs_buf_item_size").return {
    // 入参地址
    lip = @entry($lip)
    nvecs_p = @entry($nvecs)
    nbytes_p = @entry($nbytes)
    // 判断这个是不是agf的xfs_log_item
    if(lip in lip_agbp_map) {
        // 读取返回值
        nvecs = kernel_int(nvecs_p)
        nbytes = kernel_int(nbytes_p)
        agbp = lip_agbp_map[lip]
        printf("%s, tid:%d, agf:{%s}, xfs_buf_item_size.return nvecs:%d, nbytes:%d\n", ctime(), tid(), agbp_map[agbp], nvecs, nbytes)
    }
}

probe module("xfs").function("xfs_buf_item_format") {
    if($lip in lip_agbp_map) {
        agbp = lip_agbp_map[$lip]
        printf("%s, tid:%d, agf:{%s}, xfs_buf_item_format lv:%s\n", ctime(), tid(), agbp_map[agbp], $lv$)
    }
}

probe module("xfs").function("xfs_buf_item_format").return {
    // 入参地址
    lip = @entry($lip)
    if(lip in lip_agbp_map) {
        lv_bytes = @cast(@entry($lv), "struct xfs_log_vec", "xfs")->lv_bytes
        lv_buf_len = @cast(@entry($lv), "struct xfs_log_vec", "xfs")->lv_buf_len
        lv_size = @cast(@entry($lv), "struct xfs_log_vec", "xfs")->lv_size
        agbp = lip_agbp_map[lip]
        lv_agbp_map[@entry($lv)] = agbp
        printf("%s, tid:%d, agf:{%s}, xfs_buf_item_format.return lv.lv_bytes:%d, lv_buf_len:%d, lv_size:%d\n", ctime(), tid(), agbp_map[agbp], lv_bytes, lv_buf_len, lv_size)
    }
}

probe module("xfs").function("xfs_buf_item_done") {
    if($bp in agbp_map) {
        agf_info = agbp_map[$bp]
        agf_magic = @cast($bp->b_addr, "struct xfs_agf", "xfs")->agf_magicnum
        agf_freeblks = @cast($bp->b_addr, "struct xfs_agf", "xfs")->agf_freeblks
        printf("%s, tid:%d, agf:{%s}, xfs_buf_item_done, agf_magic:0x%x, agf_freeblks:%d\n", ctime(), tid(), agf_info, ntohl(agf_magic), ntohl(agf_freeblks))
        //print_backtrace()
    }
}

// xlog_sync写入日志到磁盘，发起了bio
probe module("xfs").function("xlog_sync").return {
    ic_data = @cast(@entry($iclog), "struct xlog_in_core", "xfs")->ic_data
    // 将xlog写入磁盘，获取start_lsn和tail_lsn
    start_lsn = ntohll(ic_data->hic_header->h_lsn)
    tail_lsn = ntohll(ic_data->hic_header->h_tail_lsn)
    start_lsn_blkno = start_lsn & 0xffffffff
    start_lsn_cycle = start_lsn >> 32
    tail_lsn_blkno = tail_lsn & 0xffffffff
    tail_lsn_cycle = tail_lsn >> 32
    h_len = ntohl(ic_data->hic_header->h_len)
    h_crc = ic_data->hic_header->h_crc
    printf("%s, tid:%d, xlog_sync, start_lsn:(%d,%d), tail_lsn:(%d,%d), h_len:%d, h_crc:%d, execname:%s\n", ctime(), tid(), start_lsn_cycle, start_lsn_blkno, tail_lsn_cycle, tail_lsn_blkno, h_len, h_crc, execname())
    print_backtrace()
}

// xlog_sync回调，日志写入磁盘回调，记录写入成功的lsn
probe module("xfs").function("xlog_state_do_iclog_callbacks") {
    h_crc = $iclog->ic_data->hic_header->h_crc
    h_len = ntohl($iclog->ic_data->hic_header->h_len)
    start_lsn = ntohll($iclog->ic_data->hic_header->h_lsn)
    start_lsn_blkno = start_lsn & 0xffffffff
    start_lsn_cycle = start_lsn >> 32
    printf("%s, tid:%d, xlog_state_do_iclog_callbacks, start_lsn:(%d,%d), h_len:%d, h_crc:%d, execname:%s\n", ctime(), tid(), start_lsn_cycle, start_lsn_blkno, h_len, h_crc, execname())
}

// xlog_bio_end_io--->xlog_state_do_iclog_callbacks ---> ctx ---> 日志向量 ---> xfs_log_item，agf的xfs_log_item已经提交
probe module("xfs").function("xfs_buf_item_committed") {
    if($lip in lip_agbp_map) {
        ret_lsn = $lsn
        agbp = lip_agbp_map[$lip]
        agf_info = agbp_map[agbp]

        bip_blags = @cast($lip, "struct xfs_buf_log_item", "xfs")->bli_flags
        li_lsn = $lip->li_lsn
        if(bip_blags & 0x10 && li_lsn != 0) {
            // XFS_BLI_INODE_ALLOC_BUF
            ret_lsn = li_lsn
        }
        ret_lsn_str = format_lsn(ret_lsn)
        printf("%s, tid:%d, agf:{%s}, xfs_buf_item_committed, return lsn:%s\n", ctime(), tid(), agf_info, ret_lsn_str)
    }
}

// 将xfs_log_item加入ali链表中
probe module("xfs").function("trace_xfs_ail_move") {
    if($lip in lip_agbp_map) {
        agbp = lip_agbp_map[$lip]
        agf_info = agbp_map[agbp]
        old_lsn_str = format_lsn($old_lsn)
        new_lsn_str = format_lsn($new_lsn)
        printf("%s, tid:%d, agf:{%s}, trace_xfs_ail_move: lip_lsn:%s===>%s\n", ctime(), tid(), agf_info, old_lsn_str, new_lsn_str)
    }
}

// lip加入到ail链表中
probe module("xfs").function("trace_xfs_ail_insert") {
    if($lip in lip_agbp_map) {
        agbp = lip_agbp_map[$lip]
        agf_info = agbp_map[agbp]
        new_lsn_str = format_lsn($new_lsn)
        printf("%s, tid:%d, agf:{%s}, trace_xfs_ail_insert lip_lsn:%s\n", ctime(), tid(), agf_info, new_lsn_str)
    }
}

// 解除固定日志缓冲区，后续xfsaild才可以push
probe module("xfs").function("xfs_buf_item_unpin") {
    if($lip in lip_agbp_map) {
        agbp = lip_agbp_map[$lip]
        bip_stale = @cast($lip, "struct xfs_buf_log_item", "xfs")->bli_flags & 0x04//XFS_BLI_STALE
        bip_refcount = @cast($lip, "struct xfs_buf_log_item", "xfs")->bli_refcount->counter
        bip_pincount = @cast($lip, "struct xfs_buf_log_item", "xfs")->bli_buf->b_pin_count->counter
        bip_refcount--
        bip_pincount--
        printf("%s, tid:%d, agf:{%s}, xfs_buf_item_unpin bip_stale:%d, bip_refcount:%d, bip_pincount:%d, remove:%d, execname:%s\n", ctime(), tid(), agbp_map[agbp], bip_stale, bip_refcount, bip_pincount, $remove, execname())
        // 输出谁调用的unpin
        print_backtrace()
    }
}

// 将lip对应的xfs_buf加入ail_buf_list（delay write queue）中，判断xfsaild_push_item函数的返回值
probe module("xfs").function("xfs_buf_item_push").return {
    /*
    #define XFS_ITEM_SUCCESS
    #define XFS_ITEM_PINNED 1
    #define XFS_ITEM_LOCKED 2
    #define XFS_ITEM_FLUSHING 3
    */
    ret = $return
    lip = @entry($lip)
    if(lip in lip_agbp_map) {
        agbp = lip_agbp_map[lip]
        agf_info = agbp_map[agbp]
        printf("%s, tid:%d, agf:{%s}, xfsaild_push_item.xfs_buf_item_push ret:%d\n", ctime(), tid(), agf_info, ret)
    }
}

// 提交ali的delay write queue，其实xfs_buf中就是agf的元数据了，而且是修改后的
// probe module("xfs").function("xfs_buf_delwri_submit_nowait") {}

// 将agf对应的xfs_buf元数据写入磁盘，提交一个bio
probe module("xfs").function("__xfs_buf_submit") {
    if($bp in agbp_map) {
        agf_info = agbp_map[$bp]
        if($bp->b_flags & 2) {
            // 是写入，输出agf的元数据
            agbp_buf_addr = $bp->b_addr
            agf_magic = @cast(agbp_buf_addr, "struct xfs_agf", "xfs")->agf_magicnum
            agf_freeblks = @cast(agbp_buf_addr, "struct xfs_agf", "xfs")->agf_freeblks
            printf("%s, tid:%d, agf:{%s}, __xfs_buf_submit agf_magic:0x%x, agf_freeblks:%d\n", ctime(), tid(), agf_info, ntohl(agf_magic), ntohl(agf_freeblks))
        }
    }
}

// 当agf的bio提交的回调，判断写入磁盘的结果，触发b_ioend_work这个工作任务
probe module("xfs").function("xfs_buf_bio_end_io") {
    bi_priv = $bio->bi_private
    // bio 的状态
    bio_status = $bio->bi_status
    if(bi_priv in agbp_map) {
        agf_info = agbp_map[bi_priv]
        b_io_remaining =  @cast(bi_priv, "struct xfs_buf", "xfs")->b_io_remaining->counter
        // b_io_remaining递减后=0，会触发b_ioend_work这个工作任务，运行函数xfs_buf_ioend_async
        b_io_remaining--
        printf("%s, tid:%d, agf:{%s}, xfs_buf_bio_end_io bio_status:%d, b_io_remaining:%d\n", ctime(), tid(), agf_info, bio_status, b_io_remaining)
    }
}

// agf的xfs_buf写入磁盘回调，释放lip， bip，agbp
probe module("xfs").function("xfs_buf_ioend") {
    if($bp in agbp_map) {
        agbp_bip = $bp->b_log_item
        agf_info = agbp_map[$bp]
        // 释放xfs_buf_log_item和xfs_log_item
        delete bip_agbp_map[agbp_bip]
        delete lip_agbp_map[agbp_bip]
        //
        if($bp->b_pag == 0) {
            printf("%s, tid:%d, agf:{%s}, xfs_buf_free execname:%s\n", ctime(), tid(), agf_info, execname())
            delete agbp_map[$bp]
        }
        printf("%s, tid:%d, agf:{%s}, xfs_buf_item_relse execname:%s\n", ctime(), tid(), agf_info, execname())
        print_backtrace()
    }
}
