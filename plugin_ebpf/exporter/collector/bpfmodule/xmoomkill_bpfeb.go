// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package bpfmodule

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type XMOomKillXmOomkillEvtData struct {
	Tid              int32
	Pid              int32
	MemcgId          uint64
	MemcgPageCounter uint64
	Points           uint64
	RssFilepages     uint64
	RssAnonpages     uint64
	RssShmepages     uint64
	TotalPages       uint64
	Comm             [16]int8
	Msg              [32]int8
}

// LoadXMOomKill returns the embedded CollectionSpec for XMOomKill.
func LoadXMOomKill() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XMOomKillBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load XMOomKill: %w", err)
	}

	return spec, err
}

// LoadXMOomKillObjects loads XMOomKill and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*XMOomKillObjects
//	*XMOomKillPrograms
//	*XMOomKillMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadXMOomKillObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadXMOomKill()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// XMOomKillSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XMOomKillSpecs struct {
	XMOomKillProgramSpecs
	XMOomKillMapSpecs
}

// XMOomKillSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XMOomKillProgramSpecs struct {
	KprobeXmOomKillProcess *ebpf.ProgramSpec `ebpf:"kprobe__xm_oom_kill_process"`
}

// XMOomKillMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XMOomKillMapSpecs struct {
	XmOomkillEventRingbufMap *ebpf.MapSpec `ebpf:"xm_oomkill_event_ringbuf_map"`
}

// XMOomKillObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadXMOomKillObjects or ebpf.CollectionSpec.LoadAndAssign.
type XMOomKillObjects struct {
	XMOomKillPrograms
	XMOomKillMaps
}

func (o *XMOomKillObjects) Close() error {
	return _XMOomKillClose(
		&o.XMOomKillPrograms,
		&o.XMOomKillMaps,
	)
}

// XMOomKillMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadXMOomKillObjects or ebpf.CollectionSpec.LoadAndAssign.
type XMOomKillMaps struct {
	XmOomkillEventRingbufMap *ebpf.Map `ebpf:"xm_oomkill_event_ringbuf_map"`
}

func (m *XMOomKillMaps) Close() error {
	return _XMOomKillClose(
		m.XmOomkillEventRingbufMap,
	)
}

// XMOomKillPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadXMOomKillObjects or ebpf.CollectionSpec.LoadAndAssign.
type XMOomKillPrograms struct {
	KprobeXmOomKillProcess *ebpf.Program `ebpf:"kprobe__xm_oom_kill_process"`
}

func (p *XMOomKillPrograms) Close() error {
	return _XMOomKillClose(
		p.KprobeXmOomKillProcess,
	)
}

func _XMOomKillClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xmoomkill_bpfeb.o
var _XMOomKillBytes []byte
