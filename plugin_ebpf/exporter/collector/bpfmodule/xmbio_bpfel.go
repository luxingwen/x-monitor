// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package bpfmodule

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type XMBioBioReqStage struct {
	Insert uint64
	Issue  uint64
}

type XMBioXmBioData struct {
	ReqLatencyIn2cSlots [20]uint32
	ReqLatencyIs2cSlots [20]uint32
	Bytes               uint64
	LastSector          uint64
	SequentialCount     uint64
	RandomCount         uint64
}

type XMBioXmBioKey struct {
	Major      int32
	FirstMinor int32
	CmdFlags   uint32
}

// LoadXMBio returns the embedded CollectionSpec for XMBio.
func LoadXMBio() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XMBioBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load XMBio: %w", err)
	}

	return spec, err
}

// LoadXMBioObjects loads XMBio and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*XMBioObjects
//	*XMBioPrograms
//	*XMBioMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadXMBioObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadXMBio()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// XMBioSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XMBioSpecs struct {
	XMBioProgramSpecs
	XMBioMapSpecs
}

// XMBioSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XMBioProgramSpecs struct {
	KprobeXmBlkAccountIoMergeBio *ebpf.ProgramSpec `ebpf:"kprobe__xm_blk_account_io_merge_bio"`
	KprobeXmBlkAccountIoStart    *ebpf.ProgramSpec `ebpf:"kprobe__xm_blk_account_io_start"`
	XmTpBtfBlockRqComplete       *ebpf.ProgramSpec `ebpf:"xm_tp_btf__block_rq_complete"`
	XmTpBtfBlockRqInsert         *ebpf.ProgramSpec `ebpf:"xm_tp_btf__block_rq_insert"`
	XmTpBtfBlockRqIssue          *ebpf.ProgramSpec `ebpf:"xm_tp_btf__block_rq_issue"`
}

// XMBioMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XMBioMapSpecs struct {
	XmBioInfoMap         *ebpf.MapSpec `ebpf:"xm_bio_info_map"`
	XmBioRequestStartMap *ebpf.MapSpec `ebpf:"xm_bio_request_start_map"`
}

// XMBioObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadXMBioObjects or ebpf.CollectionSpec.LoadAndAssign.
type XMBioObjects struct {
	XMBioPrograms
	XMBioMaps
}

func (o *XMBioObjects) Close() error {
	return _XMBioClose(
		&o.XMBioPrograms,
		&o.XMBioMaps,
	)
}

// XMBioMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadXMBioObjects or ebpf.CollectionSpec.LoadAndAssign.
type XMBioMaps struct {
	XmBioInfoMap         *ebpf.Map `ebpf:"xm_bio_info_map"`
	XmBioRequestStartMap *ebpf.Map `ebpf:"xm_bio_request_start_map"`
}

func (m *XMBioMaps) Close() error {
	return _XMBioClose(
		m.XmBioInfoMap,
		m.XmBioRequestStartMap,
	)
}

// XMBioPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadXMBioObjects or ebpf.CollectionSpec.LoadAndAssign.
type XMBioPrograms struct {
	KprobeXmBlkAccountIoMergeBio *ebpf.Program `ebpf:"kprobe__xm_blk_account_io_merge_bio"`
	KprobeXmBlkAccountIoStart    *ebpf.Program `ebpf:"kprobe__xm_blk_account_io_start"`
	XmTpBtfBlockRqComplete       *ebpf.Program `ebpf:"xm_tp_btf__block_rq_complete"`
	XmTpBtfBlockRqInsert         *ebpf.Program `ebpf:"xm_tp_btf__block_rq_insert"`
	XmTpBtfBlockRqIssue          *ebpf.Program `ebpf:"xm_tp_btf__block_rq_issue"`
}

func (p *XMBioPrograms) Close() error {
	return _XMBioClose(
		p.KprobeXmBlkAccountIoMergeBio,
		p.KprobeXmBlkAccountIoStart,
		p.XmTpBtfBlockRqComplete,
		p.XmTpBtfBlockRqInsert,
		p.XmTpBtfBlockRqIssue,
	)
}

func _XMBioClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xmbio_bpfel.o
var _XMBioBytes []byte
