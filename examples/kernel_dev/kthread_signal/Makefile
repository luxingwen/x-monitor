ifneq ($(KERNELRELEASE),)

EXTRA_CFLAGS += -I$(src)
obj-m += kthread_signal_test.o

else # ifneq($(KERNELRELEASE),)

DRIVER := kthread_signal_test

ifneq ($(MAKECMDGOALS),help)
include ../common.mk
endif


# Command to update initramfs or display a warning message
ifeq (${cmd_initrd},)
define cmd_initramfs
@echo "Unable to update initramfs. You may need to do this manaully."
endef
else
define cmd_initramfs
@echo "Updating initramfs..."
-@$(call cmd_initrd)
endef
endif


# Standard compilation, with regular output
default:
	@+$(call kernelbuild,modules)

# Noisy output, for extra debugging
noisy:
	$(info ccflags-y is $(ccflags-y))
	@+$(call kernelbuild,modules,V=1)

# Silence any output generated
silent:
	@+$(call kernelbuild,modules,>/dev/null)

# Enable higher warning level
checkwarnings: clean
	@+$(call kernelbuild,modules,W=1)

# Run sparse static analyzer
sparse: clean
	@+$(call kernelbuild,modules,C=2 CF="-D__CHECK_ENDIAN__ -Wbitwise -Wcontext")

# Run coccicheck static analyzer
ccc: clean
	@+$(call kernelbuild,modules,coccicheck MODE=report)

# Clean the module subdirectories
clean:
	@+$(call kernelbuild,clean)
	@-rm -rf *.ko

sign:
	@echo "Signing driver..."
	@$(call info_signed_modules)
	@$(call sign_driver)

# Install kernel module files. It is not expected to modify files outside of
# the build root. Thus, it must not update initramfs, or run depmod.
modules_install: default
	@echo "Installing modules..."
	@+$(call kernelbuild,modules_install)

# After installing all the files, perform necessary work to ensure the system
# will use the new modules. This includes running depmod to update module
# dependencies and updating the initramfs image in case the module is loaded
# during early boot.
install: modules_install
	$(call cmd_depmod)
	$(call cmd_initramfs)

modules_uninstall:
	rm -f ${INSTALL_MOD_PATH}/lib/modules/${KVER}/${INSTALL_MOD_DIR}/${DRIVER}.ko;

# After uninstalling all the files, perform necessary work to restore the
# system back to using the default kernel modules. This includes running depmod
# to update module dependencies and updating the initramfs image.
uninstall: modules_uninstall
	$(call cmd_depmod)
	$(call cmd_initramfs)

########
# Help #
########
help:
	@echo 'Build targets:'
	@echo '  default             - Build module(s) with standard verbosity'
	@echo '  noisy               - Build module(s) with V=1 verbosity -- very noisy'
	@echo '  silent              - Build module(s), squelching all output'
	@echo ''
	@echo 'Static Analysis:'
	@echo '  checkwarnings       - Clean, then build module(s) with W=1 warnings enabled'
	@echo '  sparse              - Clean, then check module(s) using sparse'
	@echo '  ccc                 - Clean, then check module(s) using coccicheck'
	@echo ''
	@echo 'Cleaning targets:'
	@echo '  clean               - Clean files generated by kernel module build'
	@echo ''
	@echo 'Other targets:'
	@echo '  manfile             - Generate a gzipped manpage'
	@echo '  modules_install     - install the module(s) only'
	@echo '  install             - Build then install the module(s) and manpage, and update initramfs'
	@echo '  modules_uninstall   - uninstall the module(s) only'
	@echo '  uninstall           - Uninstall the module(s) and manpage, and update initramfs'
	@echo '  help                - Display this help message'
	@echo ''
	@echo 'Variables:'
	@echo '  LINUX_VERSION       - Debug tool to force kernel LINUX_VERSION_CODE. Use at your own risk.'
	@echo '  W=N                 - Kernel variable for setting warning levels'
	@echo '  V=N                 - Kernel variable for setting output verbosity'
	@echo '  INSTALL_MOD_PATH    - Add prefix for the module and manpage installation path'
	@echo '  INSTALL_MOD_DIR     - Use module directory other than updates/drivers/net/ethernet/intel/${DRIVER}'
	@echo '  KSRC                - Specifies the full path to the kernel tree to build against'
	@echo ' Other variables may be available for tuning make process, see'
	@echo ' Kernel Kbuild documentation for more information'

.PHONY: default noisy clean manfile silent sparse ccc install uninstall help auxiliary_info

endif

#all:
#	make -C /lib/modules/$(KSRC)/build M=$(PWD) modules
#install:
#	make -C /lib/modules/$(KSRC)/build/ M=$(PWD) modules_install
#clean:
#	make -C /lib/modules/$(KSRC)/build M=$(PWD) clean