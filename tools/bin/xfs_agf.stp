#!/usr/bin/env stap

global agbp_map
global agbpp_map
global tran_agbp_map // xfs_trans ---> xfs_buf ---> agf
global lip_agbp_map // xfs_log_item ---> xfs_buf ---> agf
global bip_agbp_map // xfs_buf_log_item ---> xfs_buf ---> agf
//global lv_agbp_map // xfs_log_vec ---> xfs_buf ---> agf

probe begin {
	printf("start tap to xfs.agf...\n")
}

probe end {
    delete agbp_map
    delete agbpp_map
    delete tran_agbp_map
    delete lip_agbp_map
    delete bip_agbp_map
    //delete lv_agbp_map
    printf("exit tap to xfs.agf\n")
}

function build_agf_info_string:string(dev_maj, dev_min, agno)
{
    str = sprintf("dev:[%d:%d], agno:%d", dev_maj, dev_min, agno)
    return str
}

function format_lsn:string(lsn)
{
    lsn_blkno = lsn & 0xffffffff
    lsn_cycle = lsn >> 32
    str = sprintf("(%d,%d)", lsn_cycle, lsn_blkno)
    return str
}

// 读取agf的元数据返回
probe module("xfs").function("xfs_read_agf") {
    s_dev = $mp->m_super->s_dev
    dev_maj = MAJOR(s_dev)
    dev_min = MINOR(s_dev)

    if(dev_maj == 7 && dev_min == 0) {
        pid = pid()
        agbpp_map[pid] = $bpp
        printf("%s, pid:%d, --->xfs_read_agf device:[%d:%d], agno:%d\n", ctime(), pid, dev_maj, dev_min, $agno)
        //print_backtrace()
    }
}

probe module("xfs").function("xfs_buf_read_map") {
    pid = pid()
    if(pid in agbpp_map) {
        printf("%s, pid:%d, xfs_read_agf--->xfs_buf_read_map(flags:0x%x)\n", ctime(), pid, $flags)
    }
}

probe module("xfs").function("_xfs_buf_read").return {
    pid = pid()
    if(pid in agbpp_map) {
        //xfs_buf_get_map中读取的agf对应的xfs_buf没有XBF_DONE标志，因此从磁盘读取
        printf("%s, pid:%d, xfs_read_agf--->xfs_buf_read_map<---_xfs_buf_read, ret:%d\n", ctime(), pid, $return)
    }
}

probe module("xfs").function("xfs_read_agf").return {
    ret = $return
    pid = pid()
    if(pid in agbpp_map) {
        agbpp = agbpp_map[pid]
        // 读取指针地址的内容，解引用，通过这种方式可以获取函数的返回参数值, 其实就是agf的xfs_buf的地址了
        agbp_void = kernel_pointer(agbpp)
        // 将agf对应的xfs_buf加入到map中，agno作为value
        agno = @entry($agno)
        s_dev = @cast(@entry($mp), "struct xfs_mount", "xfs")->m_super->s_dev
        dev_maj = MAJOR(s_dev)
        dev_min = MINOR(s_dev)
        agf_info = build_agf_info_string(dev_maj, dev_min, agno)
        agbp_map[agbp_void] = agf_info

        agbp_error = @cast(agbp_void, "struct xfs_buf", "xfs")->b_error
        //printf("xfs_read_agf.exit pid:%d, ret:%d, agbp_error:%d\n", pid(), ret, agbp_error)
        s_dev = @cast(agbp_void, "struct xfs_buf", "xfs")->b_mount->m_super->s_dev
        agbp_buf_addr = @cast(agbp_void, "struct xfs_buf", "xfs")->b_addr
        agf_magic = @cast(agbp_buf_addr, "struct xfs_agf", "xfs")->agf_magicnum
        agf_freeblks = @cast(agbp_buf_addr, "struct xfs_agf", "xfs")->agf_freeblks
        printf("%s, pid:%d, agf:{%s}, xfs_read_agf.exit<--- ret:%d, agbp_error:%d, agf_magic:0x%x, agf_freeblks:%d\n", ctime(), pid, agf_info, ret, agbp_error, ntohl(agf_magic), ntohl(agf_freeblks))
        delete agbpp_map[pid]
    }
}

// 将agf的xfs_buf对应的xfs_log_item加入到tran中
probe module("xfs").function("_xfs_trans_bjoin") {
    if($bp in agbp_map) {
        agf_info = agbp_map[$bp]
        // struct xfs_buf_log_item	*b_log_item;
        // struct xfs_log_item	bli_item;
        agbp_bip = @cast($bp, "struct xfs_buf", "xfs")->b_log_item
        agbp_lip = &@cast($bp, "struct xfs_buf", "xfs")->b_log_item->bli_item
        // 如果是agf的xfs_buf
        printf("%s, pid:%d, agf:{%s}, _xfs_trans_bjoin xfs_log_item:%s into xfs_tran:%s\n", ctime(), pid(), agf_info, @cast($bp, "struct xfs_buf", "xfs")->b_log_item->bli_item$, $tp$)
        printf("%s, pid:%d, agf:{%s}, agbp_bip:%p, agbp_lip:%p\n", ctime(), pid(), agf_info, agbp_bip, agbp_lip)
        // 将agf的xfs_buf对应的xfs_tran加入到map中
        tran_agbp_map[$tp] = $bp
        lip_agbp_map[agbp_lip] = $bp
        bip_agbp_map[agbp_bip] = $bp
    }
}

// 分配ag的空闲空间
probe module("xfs").function("xfs_alloc_ag_vextent") {
    //s_dev = $args->mp->m_super->s_dev
    agbp = $args->agbp

    if(agbp in agbp_map) {
        agf_info = agbp_map[agbp]
        // xfs_perag
        agf_magic = @cast(agbp->b_addr, "struct xfs_agf", "xfs")->agf_magicnum
        agf_freeblks = @cast(agbp->b_addr, "struct xfs_agf", "xfs")->agf_freeblks
        printf("%s, pid:%d, agf:{%s}, xfs_alloc_ag_vextent agf_magic:0x%x, agf_freeblks:%d\n", ctime(), pid(), agf_info, ntohl(agf_magic), ntohl(agf_freeblks))
    }
}

// 分配ag的空闲空间完成，修改ag的元数据，该函数会调用xfs_alloc_log_agf，将修改记录在xfs_buf_log_item中
probe module("xfs").function("xfs_alloc_update_counters") {
    if($agbp in agbp_map) {
        agf_info = agbp_map[$agbp]
        //pagf_freeblks = @cast($agbp->b_addr, "struct xfs_agf", "xfs")->agf_freeblks
        pagf_freeblks = $agbp->b_pag->pagf_freeblks
        printf("%s, pid:%d, agf:{%s}, xfs_alloc_update_counters  pagf_freeblks:%d + len:%d\n", ctime(), pid(), agf_info, pagf_freeblks, $len)
    }
}

// 负责将缓冲区 xfs_buf 的更改记录到日志中
// probe module("xfs").function("xfs_buf_item_log") {
//     agbp = $bip->bli_buf
//     if(agbp in agbp_map) {
//         agf_info = agbp_map[agbp]
//         printf("%s, pid:%d, agf:{%s}, xfs_buf_item_log first:%d, last:%d, bi_format_count:%d, refcount:%d\n", ctime(), pid(), agf_info, $first, $last, $bip->bli_format_count, $bip->bli_refcount->counter)
//     }
// }

// 判断xfs_bmapi_write的返回值
// probe module("xfs").function("xfs_bmapi_write").return {
//     // 获得入参数xfs_tran*
//     tran = @entry($tp)
//     error = $return
//     if(tran in tran_agbp_map) {
//         agbp = tran_agbp_map[tran]
//         agf_info = agbp_map[agbp]
//         printf("%s, pid:%d, agf:{%s}, xfs_bmapi_write ret:%d\n", ctime(), pid(), agf_info, error)
//     }
// }

// 提交事务后释放事务
probe module("xfs").function("xfs_trans_free") {
    tran = $tp
    if(tran in tran_agbp_map) {
        //agbp = tran_agbp_map[tran]
        //agf_info = agbp_map[agbp]
        //printf("%s, pid:%d, agf:{%s}, xfs_trans_free tran:%p\n", ctime(), pid(), agf_info, $tp)
        delete tran_agbp_map[tran]
    }
}

// xfs_buf的xfs_log_item已经移动到cil链表中，并且从tran链表中删除
probe module("xfs").function("xfs_buf_item_committing") {
    if($lip in lip_agbp_map) {
        agbp = lip_agbp_map[$lip]
        agbp_info = agbp_map[agbp]
        // 判断是否有xfs_buf_log_item是否有dirty flag
        released = "true"
        bli_refcount = @cast($lip, "struct xfs_buf_log_item", "xfs")->bli_refcount->counter
        bli_refcount--
        bli_flags = bli_flags = @cast($lip, "struct xfs_buf_log_item", "xfs")->bli_flags
        if(bli_flags & 0x02) {
            released = "false"
        }
        printf("%s, pid:%d, agf:{%s}, xfs_buf_item_committing commit_lsn:%d, bli_refcount:%d, released:%s\n", ctime(), pid(), agbp_info, $commit_lsn, bli_refcount, released)
    }
}

// 提交事务，触发xlog_cil_push_work工作任务
probe module("xfs").function("xfs_log_commit_cil") {
    if($tp in tran_agbp_map) {
        agbp = tran_agbp_map[$tp]
        agf_info = agbp_map[agbp]
        mp_log = $mp->m_log
        // 读取地址的内容，入参
        commit_lsn = kernel_long($commit_lsn) // should be equal -1
        printf("%s, pid:%d, agf:{%s}, xfs_log_commit_cil commit_lsn:%d, xc_commit_lsn:%d, regrant:%d, xfs_tran:%s, ticket:%s\n", ctime(), pid(), agf_info, commit_lsn, mp_log->l_cilp->xc_ctx->sequence, $regrant, $tp$, $tp->t_ticket$)
    }
}

// 固定日志缓冲区
probe module("xfs").function("xfs_buf_item_pin").return {
    lip = @entry($lip)
    if(lip in lip_agbp_map) {
        bip_refcount = @cast(lip, "struct xfs_buf_log_item", "xfs")->bli_refcount->counter
        bip_pincount = @cast(lip, "struct xfs_buf_log_item", "xfs")->bli_buf->b_pin_count->counter
        agbp = lip_agbp_map[lip]
        printf("%s, pid:%d, agf:{%s}, xfs_buf_item_pin.return bip_refcount:%d, bip_pincount:%d\n", ctime(), pid(), agbp_map[agbp], bip_refcount, bip_pincount)
    }
}

probe module("xfs").function("xfs_perag_put") {
    s_dev = $pag->pag_mount->m_super->s_dev
    pag_ref = $pag->pag_ref->counter
    pag_ref--
    if(pag_ref == 0) {
        dev_maj = MAJOR(s_dev)
        dev_min = MINOR(s_dev)
        printf("%s, pid:%d, xfs_perag_put device:[%d:%d], agno:%d, pag_ref:%d\n", ctime(), pid(), dev_maj, dev_min, $pag->pag_agno, pag_ref)
    }
}

probe module("xfs").function("xfs_buf_item_size").return {
    // 入参地址
    lip = @entry($lip)
    nvecs_p = @entry($nvecs)
    nbytes_p = @entry($nbytes)
    // 判断这个是不是agf的xfs_log_item
    if(lip in lip_agbp_map) {
        // 读取返回值
        nvecs = kernel_int(nvecs_p)
        nbytes = kernel_int(nbytes_p)
        agbp = lip_agbp_map[lip]
        printf("%s, pid:%d, agf:{%s}, xfs_buf_item_size.return nvecs:%d, nbytes:%d\n", ctime(), pid(), agbp_map[agbp], nvecs, nbytes)
    }
}

probe module("xfs").function("xfs_buf_item_format") {
    if($lip in lip_agbp_map) {
        agbp = lip_agbp_map[$lip]
        printf("%s, pid:%d, agf:{%s}, xfs_buf_item_format lv:%s\n", ctime(), pid(), agbp_map[agbp], $lv$)
    }
}

probe module("xfs").function("xfs_buf_item_format").return {
    // 入参地址
    lip = @entry($lip)
    if(lip in lip_agbp_map) {
        lv_bytes = @cast(@entry($lv), "struct xfs_log_vec", "xfs")->lv_bytes
        lv_buf_len = @cast(@entry($lv), "struct xfs_log_vec", "xfs")->lv_buf_len
        lv_size = @cast(@entry($lv), "struct xfs_log_vec", "xfs")->lv_size
        agbp = lip_agbp_map[lip]
        //lv_agbp_map[@entry($lv)] = agbp
        printf("%s, pid:%d, agf:{%s}, xfs_buf_item_format.return lv.lv_bytes:%d, lv_buf_len:%d, lv_size:%d\n", ctime(), pid(), agbp_map[agbp], lv_bytes, lv_buf_len, lv_size)
    }
}
// xlog_sync写入日志到磁盘，发起了bio --->xlog_write_iclog ---> submit_bio
/*
	iclog->ic_bio.bi_end_io = xlog_bio_end_io; --->触发工作队列ic_end_io_work（xlog_ioend_work）
	iclog->ic_bio.bi_private = iclog;
*/
probe module("xfs").function("xlog_sync").return {
    ic_data = @cast(@entry($iclog), "struct xlog_in_core", "xfs")->ic_data
    // 将xlog写入磁盘，获取start_lsn和tail_lsn
    start_lsn = ntohll(ic_data->hic_header->h_lsn)
    tail_lsn = ntohll(ic_data->hic_header->h_tail_lsn)
    // start_lsn_blkno = start_lsn & 0xffffffff
    // start_lsn_cycle = start_lsn >> 32
    // tail_lsn_blkno = tail_lsn & 0xffffffff
    // tail_lsn_cycle = tail_lsn >> 32
    h_len = ntohl(ic_data->hic_header->h_len)
    h_crc = ic_data->hic_header->h_crc
    printf("%s, pid:%d, xlog_sync.return, start_lsn:%s, tail_lsn:%s, h_len:%d, h_crc:%d, execname:%s\n", ctime(), pid(), format_lsn(start_lsn), format_lsn(tail_lsn), h_len, h_crc, execname())
    //print_backtrace()
}

// xlog_in_core写入磁盘回调
// xlog_sync回调xlog_ioend_work --->xlog_state_do_iclog_callbacks，日志写入磁盘回调，记录写入成功的lsn
// 拿到xfs_cil_ctx
// --->xlog_cil_process_committed
// ---> xlog_cil_committed(ctx)
// 	xfs_trans_committed_bulk(ctx->cil->xc_log->l_ailp, ctx->lv_chain,ctx->start_lsn, abort);
probe module("xfs").function("xlog_state_do_iclog_callbacks") {
    h_crc = $iclog->ic_data->hic_header->h_crc
    h_len = ntohl($iclog->ic_data->hic_header->h_len)
    commit_lsn = ntohll($iclog->ic_data->hic_header->h_lsn)
    //start_lsn_blkno = start_lsn & 0xffffffff
    //start_lsn_cycle = start_lsn >> 32
    printf("%s, pid:%d, xlog_state_do_iclog_callbacks, commit_lsn:%s, h_len:%d, h_crc:%d, execname:%s\n", ctime(), pid(), format_lsn(commit_lsn), h_len, h_crc, execname())
}

// 会在这里设置xfs_log_item的lsn
probe module("xfs").function("xfs_trans_committed_bulk") {
    printf("%s, pid:%d, xfs_trans_committed_bulk commit_lsn:%s\n", ctime(), pid(), format_lsn($commit_lsn))
}

// xlog_bio_end_io--->xlog_state_do_iclog_callbacks ---> ctx ---> 日志向量 ---> xfs_log_item，agf的xfs_log_item已经提交
// xlog写入磁盘回调
probe module("xfs").function("xfs_buf_item_committed") {
    if($lip in lip_agbp_map) {
        ret_lsn = $lsn
        agbp = lip_agbp_map[$lip]
        agf_info = agbp_map[agbp]

        bip_blags = @cast($lip, "struct xfs_buf_log_item", "xfs")->bli_flags
        li_lsn = $lip->li_lsn
        if((bip_blags & 0x10) && li_lsn != 0) {
            // XFS_BLI_INODE_ALLOC_BUF
            ret_lsn = li_lsn
        }
        // 这个lsn应该等于ctx->start_lsn = ntohll($iclog->ic_data->hic_header->h_lsn)
        ret_lsn_str = format_lsn(ret_lsn)
        printf("%s, pid:%d, agf:{%s}, xfs_buf_item_committed, bip_blags:0x%x, lip:%p, lip_lsn:%s, commit_lsn:%s, return_lsn:%s, caller:%s\n", ctime(), pid(), agf_info, bip_blags, $lip, format_lsn(li_lsn), format_lsn($lsn), ret_lsn_str, caller())
    }
}

probe module("xfs").function("xfs_trans_ail_update_bulk") {
    printf("%s, pid:%d, xfs_trans_ail_update_bulk nr_items:%d, commit_lsn:%s\n", ctime(), pid(), $nr_items, format_lsn($lsn))
    for (i = 0; i < $nr_items; i++) {
        lip = $log_items[i]
        // 获得当前lip的lsn
        lip_lsn = lip->li_lsn
        lip_flags = lip->li_flags
        lip_type = lip->li_type
        if(lip in lip_agbp_map) {
            agbp = lip_agbp_map[lip]
            agf_info = agbp_map[agbp]
            printf("%s, pid:%d, agf:{%s}, xfs_trans_ail_update_bulk, lip:%p, lip_type:%d, lip_lsn:%s, lip_flags:0x%x, will set commit_lsn:%s, caller:%s\n", ctime(), pid(), agf_info, lip, lip_type, format_lsn(lip_lsn), lip_flags, format_lsn($lsn), caller())
        }
        // else {
        //     printf("%s, pid:%d, xfs_trans_ail_update_bulk, lip_type:%d, lip_lsn:%s, lip_flags:0x%x, will set commit_lsn:%s\n", ctime(), pid(), lip_type, format_lsn(lip_lsn), lip_flags, format_lsn($lsn))
        // }
    }
    //print_backtrace()
}

// 解除固定日志缓冲区，后续xfsaild才可以push
probe module("xfs").function("xfs_buf_item_unpin") {
    if($lip in lip_agbp_map) {
        agbp = lip_agbp_map[$lip]
        bip_stale = @cast($lip, "struct xfs_buf_log_item", "xfs")->bli_flags & 0x04//XFS_BLI_STALE
        bip_refcount = @cast($lip, "struct xfs_buf_log_item", "xfs")->bli_refcount->counter
        bip_pincount = @cast($lip, "struct xfs_buf_log_item", "xfs")->bli_buf->b_pin_count->counter
        bip_refcount--
        bip_pincount--
        printf("%s, pid:%d, agf:{%s}, xfs_buf_item_unpin bip_stale:%d, bip_refcount:%d, bip_pincount:%d, remove:%d, execname:%s\n", ctime(), pid(), agbp_map[agbp], bip_stale, bip_refcount, bip_pincount, $remove, execname())
        // 输出谁调用的unpin
        //print_backtrace()
    }
}

// 将lip对应的xfs_buf加入ail_buf_list（delay write queue）中，判断xfsaild_push_item函数的返回值
probe module("xfs").function("xfs_buf_item_push").return {
    /*
    #define XFS_ITEM_SUCCESS
    #define XFS_ITEM_PINNED 1
    #define XFS_ITEM_LOCKED 2
    #define XFS_ITEM_FLUSHING 3
    */
    ret = $return
    lip = @entry($lip)
    if(lip in lip_agbp_map) {
        agbp = lip_agbp_map[lip]
        agf_info = agbp_map[agbp]
        li_lsn = @cast(lip, "struct xfs_log_item", "xfs")->li_lsn
        printf("%s, pid:%d, agf:{%s}, xfsaild_push_item.xfs_buf_item_push li_lsn:%s ret:%d\n", ctime(), pid(), agf_info, format_lsn(li_lsn), ret)
    }
}

// 提交ali的delay write queue，其实xfs_buf中就是agf的元数据了，而且是修改后的
// probe module("xfs").function("xfs_buf_delwri_submit_nowait") {}

// 将agf对应的xfs_buf元数据写入磁盘，提交一个bio
probe module("xfs").function("__xfs_buf_submit") {
    if($bp in agbp_map) {
        agf_info = agbp_map[$bp]
        if($bp->b_flags & 2) {
            // 是写入，输出agf的元数据
            lip_lsn = $bp->b_log_item->bli_item->li_lsn
            agbp_buf_addr = $bp->b_addr
            agf_magic = @cast(agbp_buf_addr, "struct xfs_agf", "xfs")->agf_magicnum
            agf_freeblks = @cast(agbp_buf_addr, "struct xfs_agf", "xfs")->agf_freeblks
            printf("%s, pid:%d, agf:{%s}, __xfs_buf_submit agf_magic:0x%x, agf_freeblks:%d, lip_lsn:%s\n", ctime(), pid(), agf_info, ntohl(agf_magic), ntohl(agf_freeblks), format_lsn(lip_lsn))
        }
    }
}

// 当agf的bio提交的回调，判断写入磁盘的结果，触发b_ioend_work这个工作任务
probe module("xfs").function("xfs_buf_bio_end_io") {
    bi_priv = $bio->bi_private
    // bio 的状态
    bio_status = $bio->bi_status
    if(bi_priv in agbp_map) {
        agf_info = agbp_map[bi_priv]
        b_io_remaining =  @cast(bi_priv, "struct xfs_buf", "xfs")->b_io_remaining->counter
        // b_io_remaining递减后=0，会触发b_ioend_work这个工作任务，运行函数xfs_buf_ioend_async
        b_io_remaining--
        printf("%s, pid:%d, agf:{%s}, xfs_buf_bio_end_io bio_status:%d, b_io_remaining:%d\n", ctime(), pid(), agf_info, bio_status, b_io_remaining)
    }
}

// 元数据写入后，bio回调在一个工作任务重进行，xfs_log_item从ail链表中删除，说明其元数据写入磁盘
probe module("xfs").function("xfs_ail_delete_one") {
    if($lip in lip_agbp_map) {
        agbp = lip_agbp_map[$lip]
        agf_info = agbp_map[agbp]
        printf("%s, pid:%d, agf:{%s}, xfs_ail_delete_one, lip_lsn:%s\n", ctime(), pid(), agf_info, format_lsn($lip->li_lsn))
    }
}

probe module("xfs").function("xfs_buf_item_done") {
    if($bp in agbp_map) {
        agf_info = agbp_map[$bp]
        agf_magic = @cast($bp->b_addr, "struct xfs_agf", "xfs")->agf_magicnum
        agf_freeblks = @cast($bp->b_addr, "struct xfs_agf", "xfs")->agf_freeblks
        printf("%s, pid:%d, agf:{%s}, xfs_buf_item_done, agf_magic:0x%x, agf_freeblks:%d\n", ctime(), pid(), agf_info, ntohl(agf_magic), ntohl(agf_freeblks))
        //print_backtrace()
    }
}

// agf的xfs_buf写入磁盘回调，释放lip， bip，agbp
probe module("xfs").function("xfs_buf_ioend").return {
    bp = @entry($bp)
    if(bp in agbp_map) {

        agbp_bip = @cast(bp, "struct xfs_buf", "xfs")->b_log_item
        agf_info = agbp_map[bp]
        printf("%s, pid:%d, agf:{%s}, xfs_buf_ioend.return execname:%s\n", ctime(), pid(), agf_info, execname())

        delete bip_agbp_map[agbp_bip]
        delete lip_agbp_map[agbp_bip]
        delete agbp_map[bp]
        //
        // if($bp->b_pag == 0) {
        //     printf("%s, pid:%d, agf:{%s}, xfs_buf_free execname:%s\n", ctime(), pid(), agf_info, execname())
        //     delete agbp_map[$bp]
        // }
    }
}

probe module("xfs").function("xfs_bmap_extents_to_btree") {
    pid = pid()
    tran_t_firstblock = $tp->t_firstblock
    tran_t_flags = $tp->t_flags
    ip_i_ino = $ip->i_ino
    printf("%s, pid:%d, xfs_bmap_extents_to_btree, tran_t_firstblock:%d, tran_t_flags:0x%x, inode_num:%d\n", ctime(), pid, tran_t_firstblock, tran_t_flags, ip_i_ino)
    //print_backtrace()
}

probe module("xfs").function("xfs_alloc_vextent").return {
    pid = pid()
    ret = $return
    agbp = @cast(@entry($args), "struct xfs_alloc_arg", "xfs")->agbp
    if(agbp != 0) {
        args_fsbno = @cast(@entry($args), "struct xfs_alloc_arg", "xfs")->fsbno
        args_agbno = @cast(@entry($args), "struct xfs_alloc_arg", "xfs")->agbno
        args_type = @cast(@entry($args), "struct xfs_alloc_arg", "xfs")->type

        if(agbp in agbp_map) {
            agf_info = agbp_map[agbp]
            printf("%s, pid:%d, agf:{%s}, xfs_alloc_vextent.return ret:%d, fsbno:%d, agbno:%d, type:0x%x\n", ctime(), pid, agf_info, ret, args_fsbno, args_agbno, args_type)

            args_pag = @cast(@entry($args), "struct xfs_alloc_arg", "xfs")->pag
            if(args_pag != 0) {
                printf("%s, pid:%d, agf:{%s}, xfs_alloc_vextent.return perag:%s\n", ctime(), pid, agf_info, @cast(@entry($args), "struct xfs_alloc_arg", "xfs")->pag$)
            }
        }
    }

}
