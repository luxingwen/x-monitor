// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package bpfmodule

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type XMProcessVMVmShrinkInfo struct {
	Len  uint64
	Type uint64
}

type XMProcessVMXmProcessvmEvtData struct {
	Pid     int32
	Tgid    int32
	Comm    [16]int8
	EvtType XMProcessVMXmProcessvmEvtType
	_       [4]byte
	Len     uint64
}

type XMProcessVMXmProcessvmEvtType uint32

const (
	XMProcessVMXmProcessvmEvtTypeXM_PROCESSVM_EVT_TYPE_NONE           XMProcessVMXmProcessvmEvtType = 0
	XMProcessVMXmProcessvmEvtTypeXM_PROCESSVM_EVT_TYPE_MMAP_ANON_PRIV XMProcessVMXmProcessvmEvtType = 1
	XMProcessVMXmProcessvmEvtTypeXM_PROCESSVM_EVT_TYPE_MMAP_SHARED    XMProcessVMXmProcessvmEvtType = 2
	XMProcessVMXmProcessvmEvtTypeXM_PROCESSVM_EVT_TYPE_MMAP_OTHER     XMProcessVMXmProcessvmEvtType = 3
	XMProcessVMXmProcessvmEvtTypeXM_PROCESSVM_EVT_TYPE_BRK            XMProcessVMXmProcessvmEvtType = 4
	XMProcessVMXmProcessvmEvtTypeXM_PROCESSVM_EVT_TYPE_BRK_SHRINK     XMProcessVMXmProcessvmEvtType = 5
	XMProcessVMXmProcessvmEvtTypeXM_PROCESSVM_EVT_TYPE_MUNMAP         XMProcessVMXmProcessvmEvtType = 6
)

// LoadXMProcessVM returns the embedded CollectionSpec for XMProcessVM.
func LoadXMProcessVM() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XMProcessVMBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load XMProcessVM: %w", err)
	}

	return spec, err
}

// LoadXMProcessVMObjects loads XMProcessVM and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*XMProcessVMObjects
//	*XMProcessVMPrograms
//	*XMProcessVMMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadXMProcessVMObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadXMProcessVM()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// XMProcessVMSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XMProcessVMSpecs struct {
	XMProcessVMProgramSpecs
	XMProcessVMMapSpecs
}

// XMProcessVMSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XMProcessVMProgramSpecs struct {
	XmProcessDoBrkFlags   *ebpf.ProgramSpec `ebpf:"xm_process_do_brk_flags"`
	XmProcessDoMmap       *ebpf.ProgramSpec `ebpf:"xm_process_do_mmap"`
	XmProcessDoMummapExit *ebpf.ProgramSpec `ebpf:"xm_process_do_mummap_exit"`
	XmProcessDoMunmap     *ebpf.ProgramSpec `ebpf:"xm_process_do_munmap"`
	XmProcessSysEnterBrk  *ebpf.ProgramSpec `ebpf:"xm_process_sys_enter_brk"`
}

// XMProcessVMMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XMProcessVMMapSpecs struct {
	VmShrinkMap                *ebpf.MapSpec `ebpf:"vm_shrink_map"`
	XmProcessvmEventRingbufMap *ebpf.MapSpec `ebpf:"xm_processvm_event_ringbuf_map"`
}

// XMProcessVMObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadXMProcessVMObjects or ebpf.CollectionSpec.LoadAndAssign.
type XMProcessVMObjects struct {
	XMProcessVMPrograms
	XMProcessVMMaps
}

func (o *XMProcessVMObjects) Close() error {
	return _XMProcessVMClose(
		&o.XMProcessVMPrograms,
		&o.XMProcessVMMaps,
	)
}

// XMProcessVMMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadXMProcessVMObjects or ebpf.CollectionSpec.LoadAndAssign.
type XMProcessVMMaps struct {
	VmShrinkMap                *ebpf.Map `ebpf:"vm_shrink_map"`
	XmProcessvmEventRingbufMap *ebpf.Map `ebpf:"xm_processvm_event_ringbuf_map"`
}

func (m *XMProcessVMMaps) Close() error {
	return _XMProcessVMClose(
		m.VmShrinkMap,
		m.XmProcessvmEventRingbufMap,
	)
}

// XMProcessVMPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadXMProcessVMObjects or ebpf.CollectionSpec.LoadAndAssign.
type XMProcessVMPrograms struct {
	XmProcessDoBrkFlags   *ebpf.Program `ebpf:"xm_process_do_brk_flags"`
	XmProcessDoMmap       *ebpf.Program `ebpf:"xm_process_do_mmap"`
	XmProcessDoMummapExit *ebpf.Program `ebpf:"xm_process_do_mummap_exit"`
	XmProcessDoMunmap     *ebpf.Program `ebpf:"xm_process_do_munmap"`
	XmProcessSysEnterBrk  *ebpf.Program `ebpf:"xm_process_sys_enter_brk"`
}

func (p *XMProcessVMPrograms) Close() error {
	return _XMProcessVMClose(
		p.XmProcessDoBrkFlags,
		p.XmProcessDoMmap,
		p.XmProcessDoMummapExit,
		p.XmProcessDoMunmap,
		p.XmProcessSysEnterBrk,
	)
}

func _XMProcessVMClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xmprocessvm_bpfel.o
var _XMProcessVMBytes []byte
