#!/usr/bin/env bpftrace

BEGIN
{
    printf("Tracing... Hit Ctrl-C to end.\n");
    @count = 0;
}

// 追踪应用进程的虚拟内存分配
/*
kprobe:do_mmap {
    @count++;
    printf("do_mmap addr:%08x, len:%lu, port:%08x\n", arg1, arg2, arg3);
    printf("do_mmap, %d\n%s%s\n", @count, kstack(perf), ustack(perf));
}

kprobe:do_brk_flags {
    @count++;
    printf("do_brk_flags addr:%08x, len:%lu, flag:%08x\n", arg0, arg1, arg2);
    printf("do_brk_flags, %d\n%s%s\n", @count, kstack(perf), ustack(perf));
}
*/

kprobe:__x64_sys_brk /comm == "vmm_test"/ {
    printf("__x64_sys_brk comm:'%s', brk:%lu, arg1:%lu\n", comm, *((uint64*)arg0), arg1);
    printf("__x64_sys_brk, %s%s\n", kstack(perf), ustack(perf));
}

kprobe:do_syscall_64 /comm == "vmm_test"/ {
    printf("do_syscall_64 comm:'%s', nr:%lu, reg(di):%lu, reg(bp):%lu, reg(sp):%lu, reg(cx):%lu, reg(r8):%lu\n", comm, arg0, reg("di"), reg("bp"), reg("sp"), reg("cx"), reg("r8"));
}

kprobe:do_sys_open /comm == "vmm_test"/ { printf("opening: '%s'\n", str(arg0)); }
